<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/util  
     					http://www.springframework.org/schema/util/spring-util-3.0.xsd
	">
	
	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.fh">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"></property>
 	</bean>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
                 <value>classpath:dbconfig.properties</value>  
            </list>  
        </property>  
	</bean> 
	
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${url}" />  
         <property name="username" value="${username}" />  
         <property name="password" value="${password}" />  
         <property name="driverClassName" value="${driverClassName}" />  
         <property name="filters" value="${filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${validationQuery}" />  
         <property name="testWhileIdle" value="${testWhileIdle}" />  
         <property name="testOnBorrow" value="${testOnBorrow}" />  
         <property name="testOnReturn" value="${testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean>  
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.fh.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- ================ Shiro start ================ -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="sessionManager" ref="sessionManager" />
			<property name="realm" ref="casRealm" />
		</bean>
	
	<bean id="redisCacheManager" class="com.fh.cluster.RedisCacheManager"><!-- 自定义cacheManager -->
        <property name="redisManager" ref="redisManager" />
    </bean>
    <bean id="memoryCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"><!-- 自定义cacheManager -->
    </bean>
    
    <bean id="redisCache" class="com.fh.cluster.RedisCache"><!-- 自定义cacheManager -->
        <constructor-arg ref="redisManager"></constructor-arg>
    </bean> 
    <bean id="sessionManager"  class="com.fh.cluster.MyDefaultWebSessionManager">
<!--     <bean id="sessionManager"  class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager" > -->
<!-- 	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.ServletContainerSessionManager"> -->
<!--         <property name="sessionDAO" ref="redisShiroSessionDAO" /> -->
<!--        	<property name="cacheManager" ref="redisCacheManager" /> -->
       	<property name="cacheManager" ref="memoryCacheManager" />
<!--         <property name="globalSessionTimeout" value="${shiro.session.timeout}" /> -->
<!--         <property name="sessionValidationInterval" value="3000000" /> -->
        <property name="sessionIdCookieEnabled" value="true" />
    </bean>
    <bean id="redisShiroSessionDAO" class="com.fh.cluster.RedisSessionDAO">
        <property name="redisManager" ref="redisManager" />
    </bean>
    <bean id="redisManager" class="com.fh.cluster.RedisManager"></bean>
    
		<!-- 項目自定义的Realm -->
<!-- 	    <bean id="casRealm" class="com.fh.interceptor.shiro.ShiroRealm" ></bean> -->
		
		<!-- Shiro Filter -->
<!-- 		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"> -->
<!-- 			<property name="securityManager" ref="securityManager" /> -->
			
<!-- 			<property name="loginUrl" value="/login_toLogin.do" /> -->
			
<!-- 			<property name="successUrl" value="/main/index" /> -->
			
<!-- 			<property name="unauthorizedUrl" value="/login_toLogin" /> -->
			
<!-- 			<property name="filterChainDefinitions"> -->
<!-- 				<value> -->
<!-- 				/static/login/** 			= anon -->
<!-- 				/static/js/myjs/** 			= authc -->
<!-- 				/static/js/** 				= anon -->
<!-- 				/uploadFiles/uploadImgs/** 	= anon -->
<!-- 	           	/code.do 					= anon -->
<!-- 	           	/login_login	 			= anon -->
<!-- 	           	/app**/** 					= anon -->
<!-- 	           	/weixin/** 					= anon -->
<!-- 	           	/**							= authc -->
<!-- 				</value> -->
<!-- 			</property> -->
<!-- 		</bean> -->
		
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	        <property name="securityManager" ref="securityManager"/>  
	        <!-- 设定角色的登录链接，这里为cas登录页面的链接可配置回调地址  -->  
	        <property name="loginUrl" value="https://yexinzhou/cas/login?service=http://yexinzhou:9090/muses/shiro-cas" />  
	        <!-- 设置访问了没有权限的url的提示页面 -->
	        <property name="unauthorizedUrl" value="/login_toLogin.do"></property>
	        <property name="successUrl" value="/main/index" />
	        <property name="filters">  
	            <util:map>  
	                <!-- 添加casFilter到shiroFilter -->  
	                <entry key="casFilter" value-ref="casFilter"/>  
	                <entry key="logout" value-ref="logout"/>
	            </util:map>  
	        </property>   
	        <property name="filterChainDefinitions">  
	            <value>
	            	/shiro-cas = casFilter    
	                /logout = logout
	                /static/login/** 			= anon
					/static/js/myjs/** 			= authc
					/static/js/** 				= anon
					/uploadFiles/uploadImgs/** 	= anon
		           	/code.do 					= anon
		           	/login_login	 			= anon
		           	/app**/** 					= anon
		           	/weixin/** 					= anon
		           	/**							= roles[DEFAULT_USER]
	            </value>  
	        </property>  
	    </bean>
	    
    	<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
			<property name="redirectUrl" value="https://yexinzhou/cas/logout?service=http://yexinzhou:9090/muses/" />
		</bean>
		
		<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">  
	        <!-- 配置验证错误时的失败页面  -->  
	        <property name="failureUrl" value="/error.do"/>  
	    </bean>  
	      
	    <bean id="casRealm" class="com.fh.interceptor.shiro.MusesCasRealm">  
	        <property name="casServerUrlPrefix" value="https://yexinzhou/cas"/>  
	        <!-- 客户端的回调地址设置，必须和下面的shiro-cas过滤器拦截的地址一致 -->  
	        <property name="casService" value="http://yexinzhou:9090/muses/shiro-cas"/>  
	    </bean> 
    
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
  
	    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
	        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>  
	        <property name="arguments" ref="securityManager"/>  
	    </bean>
	<!-- ================ Shiro end ================ -->
	
   
</beans>
